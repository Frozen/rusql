// vim:set et sw=4 ts=4 ft=rust:
// Adapted from: https://github.com/steveyen/sqld3/blob/master/sql.pegjs
// And: https://www.sqlite.org/lang.html

use definitions::*;

#[pub]
rusql_stmt -> RusqlStatement
        = whitespace s:(alter_table_stmt) whitespace semicolon { s }
        / whitespace s:(create_table_stmt) whitespace semicolon { s }
        / whitespace s:(delete_stmt) whitespace semicolon { s }
        / whitespace s:(drop_table_stmt) whitespace semicolon { s }
        / whitespace s:(insert_stmt) whitespace semicolon { s }
        / whitespace s:(select_stmt) whitespace semicolon { s }
        / whitespace s:(update_stmt) whitespace semicolon { s }

#[pub]
rusql_parse -> Vec<RusqlStatement>
        = rusql_stmt ++ whitespace

//
// Statements
//

// ALTER TABLE
// https://www.sqlite.org/lang_altertable.html

alter_table_stmt -> RusqlStatement
        = ALTER TABLE n:table_name a:(rename_to / add_column) {
            let def = AlterTableDef {
                name: n,
                mode: a,
            };
            RusqlStatement::AlterTable(def)
        }

rename_to -> AlterTable
        = RENAME TO n:table_name { AlterTable::RenameTo(n) }

add_column -> AlterTable
        = ADD COLUMN? c:column_def { AlterTable::AddColumn(c) }

// CREATE TABLE
// https://www.sqlite.org/lang_createtable.html

create_table_stmt -> RusqlStatement
        = CREATE TABLE n:table_name whitespace lparen c:(column_def ++ comma) rparen {
            let def = TableDef {
                table_name: n,
                columns: c,
            };
            RusqlStatement::CreateTable(def)
          }

column_def -> ColumnDef
        = n:column_name t:(type_name)? c:(column_constraint)* {
            ColumnDef {
                name: n,
                column_type: t,
                column_constraints: c,
            }
        }

column_constraint -> ColumnConstraint
        = (CONSTRAINT name)? (PRIMARY KEY) {
            ColumnConstraint::PrimaryKey
        }

// DELETE
// https://www.sqlite.org/lang_delete.html
delete_stmt -> RusqlStatement
        = DELETE FROM n:qualified_table_name w:where_expr? {
            let def = DeleteDef {
                name: n,
                where_expr: w,
            };
            RusqlStatement::Delete(def)
        }

// DROP TABLE
// https://www.sqlite.org/lang_droptable.html

drop_table_stmt -> RusqlStatement
        = DROP TABLE n:table_name {
            let def = DropTableDef {
                name: n,
            };
            RusqlStatement::DropTable(def)
        }

// INSERT
// https://www.sqlite.org/lang_insert.html

insert_stmt -> RusqlStatement
        = INSERT INTO n:table_name cn:insert_column_name? d:insert_data_source {
            let def = InsertDef {
                table_name: n,
                column_names: cn,
                data_source: d,
            };
            RusqlStatement::Insert(def)
        }

insert_data_source -> InsertDataSource
        = VALUES v:(insert_values ++ comma) { InsertDataSource::Values(v) }
        / s:select_stmt {
            match s {
                RusqlStatement::Select(stmt) => InsertDataSource::Select(stmt),
                _ => InsertDataSource::Error,
            }
        }
        / DEFAULT VALUES { InsertDataSource::DefaultValues }

insert_column_name -> Vec<String>
        = whitespace lparen s:(column_name ++ comma) rparen { s }

insert_values -> Vec<LiteralValue>
        = whitespace lparen l:(literal_value ++ comma) rparen { l }

// SELECT
// https://www.sqlite.org/lang_select.html

select_stmt -> RusqlStatement
        = SELECT r:result_column FROM t:(table_or_subquery ++ comma) w:where_expr? {
            let def = SelectDef {
                result_column: r,
                table_or_subquery: t,
                where_expr: w,
            };
            RusqlStatement::Select(def)
        }

result_column -> ResultColumn
        = whitespace1 a:asterisk { ResultColumn::Asterisk }

table_or_subquery -> String
        = table_name

// UPDATE
// https://www.sqlite.org/lang_update.html

update_stmt -> RusqlStatement
        = UPDATE n:qualified_table_name SET s:(update_column_equals ++ comma) w:where_expr? {
            let def = UpdateDef {
                name: n,
                set: s,
                where_expr: w,
            };
            RusqlStatement::Update(def)
        }

update_column_equals -> (String, Expression)
        = n:column_name equals e:expr { (n, e) }

qualified_table_name -> String
        = table_name

//
// Expressions
// https://www.sqlite.org/lang_expr.html
//

value -> Expression
    = l:literal_value { Expression::LiteralValue(l) }
    / t:table_name dot n:column_name { Expression::TableName((t, box Expression::ColumnName(n))) }
    / n:column_name { Expression::ColumnName(n) }

expr -> Expression
        = whitespace (
            e1:value b:binary_operator e2:expr { Expression::BinaryOperator((b, box e1, box e2)) }
            / v:value { v }
        )

where_expr -> Expression
        = WHERE whitespace1 e:expr { e }

//////////////////////////////////////////////////////////////////////////////////////////////////

whitespace = [ \t\n\r]*
whitespace1 = [ \t\n\r]+
semicolon = ";"
lparen = "("
rparen = ")"
comma = ","
asterisk = "*"
equals = "="
equals2 = "=="
dot = "."

string_literal -> String
        = "\"" s:string "\"" { s }
string -> String
        = (escape_char / [^"])* { match_str.to_string() } //"// (syntax highlight fix)
escape_char = "\\" .

ALTER = whitespace "ALTER"
CREATE = whitespace "CREATE"
DELETE = whitespace "DELETE"
DROP = whitespace "DROP"
INSERT = whitespace "INSERT"
SELECT = whitespace "SELECT"
UPDATE = whitespace "UPDATE"

ADD = whitespace1 "ADD"
COLUMN = whitespace1 "COLUMN"
CONSTRAINT = whitespace1 "CONSTRAINT"
DEFAULT = whitespace1 "DEFAULT"
FROM = whitespace1 "FROM"
TABLE = whitespace1 "TABLE"
INTEGER = whitespace1 "INTEGER"
INTO = whitespace1 "INTO"
KEY = whitespace1 "KEY"
PRIMARY = whitespace1 "PRIMARY"
RENAME = whitespace1 "RENAME"
SET = whitespace1 "SET"
TEXT = whitespace1 "TEXT"
TO = whitespace1 "TO"
VALUES = whitespace1 "VALUES"
WHERE = whitespace1 "WHERE"

// no whitespace name
nws_name -> String
        = [A-Za-z0-9_]+ { match_str.to_string() }

name -> String
        = whitespace1 n:nws_name { n }

table_name -> String
        = whitespace n:nws_name { n }

column_name -> String
        = whitespace n:nws_name { n }

type_name -> ColumnType
        = INTEGER { ColumnType::Integer }
        / TEXT { ColumnType::Text }

literal_value -> LiteralValue
        = whitespace ([0-9]+ { LiteralValue::Integer(match_str.parse::<int>().unwrap()) })
        / whitespace (s:string_literal { LiteralValue::Text(s) })

binary_operator -> BinaryOperator
        = (equals / equals2) { BinaryOperator::Equals }
